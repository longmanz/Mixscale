nt.class.name = "NT",
min.de.genes = 5,
split.by = "cell_type",
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
prtb.type = "P",
new.class.name = "mixscape_v1",
fine.mode = F,
harmonize = T,
seed = 1)
load_all("/Users/uqljian5/Documents/github_repo/Perturbation_Scoring")
# 3. Perturbation scoring for each cell
seurat_obj = PRTBScoring(
object = seurat_obj,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
split.by = "cell_type",
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
prtb.type = "P",
new.class.name = "mixscape_v1",
fine.mode = F,
harmonize = T,
seed = 1)
# 4. Perform scoring-based DE test using the scores
de_res = scoringDE(object = seurat_obj, assay = "RNA", slot = "counts",
labels = "gene")
load_all("/Users/uqljian5/Documents/github_repo/Perturbation_Scoring")
# 4. Perform scoring-based DE test using the scores
de_res = scoringDE(object = seurat_obj, assay = "RNA", slot = "counts",
PRTB_list = c("RFX5", "ZC3H3", "IFNGR1", "IFNGR2",
"IRF1", "IRF2",  "JUN", "MAFF",
"PARP12", "TRAFD1",
"JAK1", "JAK2",
"STAT1", "SP100"),
labels = "gene")
str(de_res)
# and re-arrange the DE results into Z-score matrices
DEG_mat = get_DE_mat(de_res)
DEG_mat = prune_DE_mat(de_res)
DEG_mat = prune_DE_mat(DEG_mat)
str(DEG_mat)
# and re-arrange the DE results into Z-score matrices
DEG_mat = get_DE_mat(de_res)
DEG_mat = prune_DE_mat(DEG_mat, mask_target = T, min_sig_DEG = 3)
str(DEG_mat)
head(DEG_mat$A549)
#########
# 5.1 within-prtb
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#####
for(i in 1:length(PRTB_list)){
PRTB = PRTB_list[i]
tmp=list()
for(CELLTYPE in celltype_list){
tmp[[CELLTYPE]] = DEG_mat[[CELLTYPE]][, PRTB]
}
tmp = Reduce(cbind, tmp)
colnames(tmp) = celltype_list
rownames(tmp) = gene_ID
#  run Permutation test and extract gene signatures
res = PCApermtest(mat = tmp, row_filtering_pval = 0.05, k = 1)
sig_genes = get_sig_genes(perm_obj = res, k = 1, collapse = T)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "standard", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level1/",
prefix = PRTB)
}
names(DEG_mat)
#####
for(i in 1:length(PRTB_list)){
PRTB = PRTB_list[i]
tmp=list()
for(CELLTYPE in celltype_list){
if(PRTB %in% colnames(DEG_mat[[CELLTYPE]])){
tmp[[CELLTYPE]] = DEG_mat[[CELLTYPE]][, PRTB]
}
}
tmp = Reduce(cbind, tmp)
colnames(tmp) = celltype_list
rownames(tmp) = gene_ID
#  run Permutation test and extract gene signatures
res = PCApermtest(mat = tmp, row_filtering_pval = 0.05, k = 1)
sig_genes = get_sig_genes(perm_obj = res, k = 1, collapse = T)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "standard", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level1/",
prefix = PRTB)
}
colnames(DEG_mat[[CELLTYPE]])
PRTB
PRTB %in% colnames(DEG_mat[[CELLTYPE]])
head(tmp)
# and re-arrange the DE results into Z-score matrices
DEG_mat = get_DE_mat(de_res)
DEG_mat_main = DEG_mat
#########
# 5.1 within-prtb
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 0)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#####
for(i in 1:length(PRTB_list)){
PRTB = PRTB_list[i]
tmp=list()
for(CELLTYPE in celltype_list){
if(PRTB %in% colnames(DEG_mat[[CELLTYPE]])){
tmp[[CELLTYPE]] = DEG_mat[[CELLTYPE]][, PRTB]
}
}
tmp = Reduce(cbind, tmp)
colnames(tmp) = celltype_list
rownames(tmp) = gene_ID
#  run Permutation test and extract gene signatures
res = PCApermtest(mat = tmp, row_filtering_pval = 0.05, k = 1)
sig_genes = get_sig_genes(perm_obj = res, k = 1, collapse = T)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "standard", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level1/",
prefix = PRTB)
}
#########
# 5.2 within-celltype
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 3)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
for(i in 1:length(celltype_list)){
CELLTYPE = celltype_list[i]
tmp=DEG_mat[[CELLTYPE]]
#  run Permutation test and extract gene signatures
res = DEhclust(mat = tmp)
sig_genes = get_sig_genes_DEhclust(obj = res)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "hclust", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level2/",
prefix = CELLTYPE)
}
#########
#  5.3 MultiCCA analysis
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 3, center = T)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#  run Permutation test and extract gene signatures
res = DEmultiCCA(DEG_mat, cor_coef_thres = 0.6, max_k = 3)
str(DEG_mat)
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.8, max_k = 3)
str(res)
str(DEG_mat)
#########
#  5.3 MultiCCA analysis
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 1, center = T)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.6, max_k = 3)
sig_genes = get_sig_genes_DEmultiCCA(res)
str(sig_genes)
str(res)
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.8, max_k = 3)
str(res)
sig_genes = get_sig_genes_DEmultiCCA(res)
# visualization.
DE_heatmap(obj = res, sig_genes = sig_genes,
type = "multiCCA", direction = "both",
top_n = 30, labRow = T, output_path = "/Users/uqljian5/Desktop/test_multiCCA/level3/",
prefix = "IFNG")
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.6, max_k = 3, standardize = T)
sig_genes = get_sig_genes_DEmultiCCA(res)
# visualization.
DE_heatmap(obj = res, sig_genes = sig_genes,
type = "multiCCA", direction = "both",
top_n = 30, labRow = T, output_path = "/Users/uqljian5/Desktop/test_multiCCA/level3/",
prefix = "IFNG")
# visualization.
DE_heatmap(obj = res, sig_genes = sig_genes,
type = "multiCCA", direction = "both",
top_n = 30, labRow = T, output_path = "/Users/uqljian5/Desktop/test_multiCCA/level3/",
prefix = "IFNG")
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.8, max_k = 3, standardize = T)
sig_genes = get_sig_genes_DEmultiCCA(res)
# visualization.
DE_heatmap(obj = res, sig_genes = sig_genes,
type = "multiCCA", direction = "both",
top_n = 30, labRow = T, output_path = "/Users/uqljian5/Desktop/test_multiCCA/level3/",
prefix = "IFNG")
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 0)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
PRTB = PRTB_list[i]
tmp=list()
for(CELLTYPE in celltype_list){
if(PRTB %in% colnames(DEG_mat[[CELLTYPE]])){
tmp[[CELLTYPE]] = DEG_mat[[CELLTYPE]][, PRTB]
}
}
tmp = Reduce(cbind, tmp)
colnames(tmp) = celltype_list
rownames(tmp) = gene_ID
#  run Permutation test and extract gene signatures
res = PCApermtest(mat = tmp, row_filtering_pval = 0.05, k = 1)
sig_genes = get_sig_genes(perm_obj = res, k = 1, collapse = T)
str(sig_genes)
PRTB
#########
# 5.2 within-celltype
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 3)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
CELLTYPE = celltype_list[i]
tmp=DEG_mat[[CELLTYPE]]
#  run Permutation test and extract gene signatures
res = DEhclust(mat = tmp)
sig_genes = get_sig_genes_DEhclust(obj = res)
str(sig_genes)
names(sig_genes)
#########
#  5.3 MultiCCA analysis
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 1, center = T)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.8, max_k = 3, standardize = T)
sig_genes = get_sig_genes_DEmultiCCA(res)
str(sig_genes)
names(sig_genes)
##################################
#  Decomposition
go_db = list()
#########
# 5.1 within-prtb
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 0)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#####
for(i in 1:length(PRTB_list)){
PRTB = PRTB_list[i]
tmp=list()
for(CELLTYPE in celltype_list){
if(PRTB %in% colnames(DEG_mat[[CELLTYPE]])){
tmp[[CELLTYPE]] = DEG_mat[[CELLTYPE]][, PRTB]
}
}
tmp = Reduce(cbind, tmp)
colnames(tmp) = celltype_list
rownames(tmp) = gene_ID
#  run Permutation test and extract gene signatures
res = PCApermtest(mat = tmp, row_filtering_pval = 0.05, k = 1)
sig_genes = get_sig_genes(perm_obj = res, k = 1, collapse = T)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "standard", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level1/",
prefix = PRTB)
# store the gene signatures to the go-term repo
if(length(sig_genes$upDEGs) >= 10){
go_db[[paste0(PRTB, "_upDEGs")]] = sig_genes$upDEGs
}
if(length(sig_genes$downDEGs) >= 10){
go_db[[paste0(PRTB, "_downDEGs")]] = sig_genes$downDEGs
}
}
#########
# 5.2 within-celltype
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 3)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
for(i in 1:length(celltype_list)){
CELLTYPE = celltype_list[i]
tmp=DEG_mat[[CELLTYPE]]
#  run Permutation test and extract gene signatures
res = DEhclust(mat = tmp)
sig_genes = get_sig_genes_DEhclust(obj = res)
# plot Z-score heatmap for the gene signatures
DE_heatmap(obj = res, sig_genes = sig_genes, type = "hclust", direction = "both", top_n = 30,
output_path = "/Users/uqljian5/Desktop/test_multiCCA/level2/",
prefix = CELLTYPE)
# store the gene signatures to the go-term repo
for(CLUSTER in names(sig_genes)){
if(length(sig_genes[[CLUSTER]]$sig_genes$upDEGs) >= 10){
go_db[[paste0(CELLTYPE, "_", CLUSTER, "_upDEGs")]] = sig_genes[[CLUSTER]]$sig_genes$upDEGs
}
if(length(sig_genes[[CLUSTER]]$sig_genes$downDEGs) >= 10){
go_db[[paste0(CELLTYPE, "_", CLUSTER,"_downDEGs")]] = sig_genes[[CLUSTER]]$sig_genes$downDEGs
}
}
}
#########
#  5.3 MultiCCA analysis
DEG_mat = prune_DE_mat(DEG_mat_main, mask_target = T, min_sig_DEG = 1, center = T)
celltype_list = names(DEG_mat)
PRTB_list = colnames(DEG_mat[[1]])
gene_ID = rownames(DEG_mat[[1]])
#  run Permutation test and extract gene signatures
res = DEmultiCCA(mat_list = DEG_mat, cor_coef_thres = 0.8, max_k = 3, standardize = T)
sig_genes = get_sig_genes_DEmultiCCA(res)
# visualization.
DE_heatmap(obj = res, sig_genes = sig_genes,
type = "multiCCA", direction = "both",
top_n = 30, labRow = T, output_path = "/Users/uqljian5/Desktop/test_multiCCA/level3/",
prefix = "IFNG")
# store the gene signatures to the go-term repo
for(PROGRAM in names(sig_genes)){
if(length(sig_genes[[PROGRAM]]$sig_genes$upDEGs) >= 10){
go_db[[paste0("IFNG_", PROGRAM, "_upDEGs")]] = sig_genes[[PROGRAM]]$sig_genes$upDEGs
}
if(length(sig_genes[[PROGRAM]]$sig_genes$downDEGs) >= 10){
go_db[[paste0("IFNG_", PROGRAM, "_downDEGs")]] = sig_genes[[PROGRAM]]$sig_genes$downDEGs
}
}
str(go_db)
head(seurat_obj)
##########
# 6.1 DE tests
seurat_obj$Condition = paste0(seurat_obj$cell_type, "_", seurat_obj$gene)
Idents(seurat_obj) = "Condition"
table(seurat_obj$Condition)
new_DE_test = FindMarkers(seurat_obj, ident.1 = "A549_NT", ident.2 = "A549_IFNGR2")
seurat_obj
new_DE_test = FindMarkers(seurat_obj, ident.1 = "A549_NT", ident.2 = "A549_IFNGR2",
slot = "data", logfc.threshold = 0)
head(new_DE_test)
# get the background gene list
background = rownames(new_DE_test)
# get the significant down-reg genes (the input list )
input_list = rownames(new_DE_test[new_DE_test$p_val_adj <= 0.05 & new_DE_test$avg_log2FC > 0, ])
# get the significant down-reg genes (the input list )
input_list = rownames(new_DE_test[new_DE_test$p_val_adj <= 0.05 & new_DE_test$avg_log2FC > 0.2, ])
# get the significant down-reg genes (the input list )
input_list = rownames(new_DE_test[new_DE_test$p_val_adj <= 0.05 & new_DE_test$avg_log2FC > 0.2, ])
# 6.2 Conventional test (Fisher's exact test)
fisher_enrich_res = fisher_enrich_test(input_list = input_list,
background = background,
go_term_db = go_db)
head(fisher_enrich_res)
fisher_enrich_res = fisher_enrich_res[order(fisher_enrich_res$Pval), ]
head(fisher_enrich_res)
head(fisher_enrich_res, 20)
# 6.3 Rank biased overlap based test
# RBO test does NOT require pre-select DEGs based on P-value or log-fold-change
input_list2 = rownames(new_DE_test[new_DE_test$avg_log2FC > 0, ])
head(new_DE_test[new_DE_test$avg_log2FC > 0, ], 30)
# 6.3 Rank biased overlap based test
# RBO test does NOT require pre-select DEGs based on P-value or log-fold-change
input_list2 = rownames(new_DE_test[new_DE_test$avg_log2FC > 0, ])
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99)
head(input_list2)
length(input_list2)
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99,
side = "bottom")
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99,
k = 300,
side = "bottom")
load_all("/Users/uqljian5/Documents/github_repo/Perturbation_Scoring")
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99,
k = 300,
side = "bottom")
head(input_list2)
str(go_db)
go_term_db = go_db
class(go_term_db[[1]]) == "list"
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99,
k = 300,
side = "bottom")
rbo
input_list,
input_list
go_term_db
p
input_list
go_term_db
p = 0.99
n_iter = 500
k=300
side=  "bottom"
mid = NULL
uneven.lengths = TRUE
empirical_test = FALSE
seed = 131415926
if(length(input_list) < 5){
print("The length of the input list is less than 5, stopping analysis...")
return(NULL)
}
# 0. each vector in the go_term_db is assumed to be an ordered vector of characters (gene names).
#    we need to convert each vector in to a named vector of number (number being the rank of each gene).
go_term_db2 = lapply(X = go_term_db,
FUN = function(x) {
if(side == "bottom") tmp = 1:length(x)
else if (side == "top") tmp = length(x):1
names(tmp) = x
return(tmp)
})
str(go_term_db2 )
# 1. calculate the true RBO for the input_list and all the GO terms
rbo_real = sapply(X = go_term_db2,
FUN = rbo,
list2 = input_list,
p = p,
k = k,
side = side,
mid = mid,
uneven.lengths = uneven.lengths)
head(input_list)
load_all("/Users/uqljian5/Documents/github_repo/Perturbation_Scoring")
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.99,
k = 100,
side = "bottom")
head(rbo_enrich_res)
rbo_enrich_res = rbo_enrich_res[order(rbo_enrich_res$RBO, decreasing = T), ]
head(rbo_enrich_res, 20)
rbo_enrich_res = rbo_enrich_test(input_list = input_list2,
go_term_db = go_db,
p = 0.98,
k = 100,
side = "bottom")
rbo_enrich_res = rbo_enrich_res[order(rbo_enrich_res$RBO, decreasing = T), ]
head(rbo_enrich_res)
options(Seurat.object.assay.version = 'v3')
library(Seurat)
library(ggridges)
library(stringr)
library(Mixscale)
library(ggplot2)
seurat_obj = readRDS("/Users/uqljian5/Desktop/Lab_stuffs_NYGC/Paper_information_gathering/results/GSE132080/seurat_obj_GSE132080_QCed_2023Aug10.rds")
seurat_obj
gv.list = Tool(seurat_obj, slot = "RunMixscape")
gv.list = Tool(seurat_obj, slot = "PRTBScoring")
str(gv.list)
load_all("/Users/uqljian5/Documents/github_repo/Mixscale")
devtools::load_all("/Users/uqljian5/Documents/github_repo/Mixscale/")
seurat_obj
obj2 = RunMixscale(
object = seurat_obj,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "neg",
min.de.genes = 5,
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
fine.mode = F)
devtools::load_all("/Users/uqljian5/Documents/github_repo/Mixscale/")
obj2 = RunMixscale(
object = seurat_obj,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "neg",
min.de.genes = 5,
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
fine.mode = F)
devtools::load_all("/Users/uqljian5/Documents/github_repo/Mixscale/")
obj2 = RunMixscale(
object = seurat_obj,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "neg",
min.de.genes = 5,
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
fine.mode = F)
devtools::load_all("/Users/uqljian5/Documents/github_repo/Mixscale/")
obj2 = RunMixscale(
object = seurat_obj,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "neg",
min.de.genes = 5,
logfc.threshold = 0.2,
de.assay = "RNA",
max.de.genes = 100,
fine.mode = F)
head(obj2)
plot(obj2$pvec, obj2$weight)
rm(list=ls())
gc()
